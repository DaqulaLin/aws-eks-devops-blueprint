# Chart: grafana/promtail
# 作用：仅采集 dev/staging/prod 的业务日志；丢弃健康检查/DEBUG 等噪声；合理保留标签避免高基数。

serviceAccount:
  create: true
  name: promtail

config:
  server:
    http_listen_port: 3101
    grpc_listen_port: 0

  positions:
    filename: /run/promtail/positions.yaml

  clients:
    - url: http://loki.logging.svc.cluster.local:3100/loki/api/v1/push   # 如服务名不同，这里改掉

  # —— 采集配置（基于 K8s Pod 发现）——
  scrape_configs:
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
        - role: pod

      # 1) 命名空间白名单（效率最高）：只采 dev/staging/prod
      relabel_configs:
        - action: keep
          source_labels: [__meta_kubernetes_namespace]
          regex: (dev|staging|prod)

        # 2) 常用标签映射，避免高基数；仅保留少量关键标签
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(app|app_kubernetes_io_name|app_kubernetes_io_instance)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod
        - source_labels: [__meta_kubernetes_container_name]
          target_label: container

      # 3) 日志流水线：解析并降噪
      pipeline_stages:
        # 如果是 containerd/CRI（EKS 默认是 containerd），用 cri；如果是 Docker runtime，用 docker（二选一）
        - cri: {}
        # - docker: {}

        # 3.1 丢弃健康检查/探针等无意义高频日志
        - match:
            selector: '{container=~".*"}'
            stages:
              - drop:
                  expression: 'kube-probe|/healthz|/readyz|/livez|GET /metrics'

        # 3.2 Nginx Ingress 常见健康检查降噪（如你使用 ingress-nginx）
        - match:
            selector: '{app="ingress-nginx"}'
            stages:
              - drop:
                  expression: 'GET /(healthz|nginx_status) HTTP/1\.1" 200'

        # 3.3 丢弃 DEBUG（按需保留 INFO/WARN/ERROR）
        - match:
            selector: '{container=~".*"}'
            stages:
              - drop:
                  expression: '\bDEBUG\b'

# 让 Prometheus 能抓到 promtail 自身指标（可选）
serviceMonitor:
  enabled: true